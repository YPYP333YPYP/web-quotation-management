name: Deploy to GCP
on:
  push:
    branches: [ main ]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up GCP SSH key and known hosts
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.GCP_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          echo "${{ secrets.GCP_SSH_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub
          chmod 600 ~/.ssh/id_rsa
          chmod 644 ~/.ssh/id_rsa.pub
          echo "${{ secrets.GCP_HOST_SERVER }} $(ssh-keyscan ${{ secrets.GCP_HOST_SERVER }} 2>/dev/null)" >> ~/.ssh/known_hosts

      - name: Copy source code to GCP
        run: |
          scp -r ./* ${{ secrets.GCP_HOST_NAME }}@${{ secrets.GCP_HOST_SERVER }}:/home/${{ secrets.GCP_HOST_NAME }}/app/

      - name: Deploy to GCP
        env:
          GCP_HOST_SERVER: ${{ secrets.GCP_HOST_SERVER }}
          GCP_HOST_NAME: ${{ secrets.GCP_HOST_NAME }}
          ENV_FILE_CONTENT: ${{ secrets.ENV_FILE }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_HOST_NAME }}@${{ secrets.GCP_HOST_SERVER }} << EOF
            set -e
            
            echo "Changing to app directory..."
            cd /home/${{ secrets.GCP_HOST_NAME }}/app
            
            echo "Creating .env file..."
            echo "$ENV_FILE_CONTENT" > .env
            chmod 600 .env
            
            echo "Updating Python..."
            sudo apt-get update
            sudo apt-get install -y python3-pip python3-venv
            
            echo "Upgrading pip..."
            python3 -m pip install --upgrade pip
            
            echo "Installing Poetry..."
            curl -sSL https://install.python-poetry.org | python3 -
            export PATH="/home/${{ secrets.GCP_HOST_NAME }}/.local/bin:$PATH"
            
            echo "Upgrading Poetry..."
            poetry self update
            
            echo "Installing platformdirs..."
            pip install platformdirs
            
            echo "Configuring Poetry..."
            poetry config virtualenvs.create true
            poetry config virtualenvs.in-project true
            
            echo "Poetry version:"
            poetry --version
            
            echo "Removing existing virtual environment..."
            rm -rf .venv
            
            echo "Creating new virtual environment..."
            python3 -m venv .venv
            
            echo "Activating virtual environment..."
            source .venv/bin/activate
            
            echo "Updating poetry lock file..."
            poetry lock --no-update
            
            echo "Installing dependencies..."
            poetry install --no-interaction --no-root
            
            echo "Checking virtual environment path:"
            poetry env info --path
            
            echo "Listing installed packages:"
            poetry show
          
            echo "Running database migrations..."
            poetry run alembic upgrade head
          
            echo "Checking for existing process on port 8000..."
            existing_pid=\$(lsof -ti:8000)
            if [ ! -z "\$existing_pid" ]; then
              echo "Killing existing process on port 8000 (PID: \$existing_pid)"
              kill -9 $existing_pid
              sleep 2
            else
              echo "No process found on port 8000"
            fi
          
            echo "Starting application in background..."
            nohup poetry run uvicorn main:app --host 0.0.0.0 --port 8000 --reload > app.log 2>&1 &
            
            echo "Waiting for application to start..."
            sleep 5
            
            echo "Checking if application is running..."
            if pgrep -f "uvicorn main:app" > /dev/null
            then
              echo "Application is running."
              echo "Recent log entries:"
              tail -n 20 app.log
            else
              echo "Error: Application failed to start."
              echo "Log contents:"
              cat app.log
              exit 1
            fi
            
            echo "Deployment completed successfully."
          EOF