name: Deploy to GCP

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: '1.7.1'
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Run tests
      run: poetry run pytest tests
      continue-on-error: true

    - name: Verify and create .env file
      run: |
        echo "${{ secrets.ENV_FILE_CONTENT }}" > $GITHUB_WORKSPACE/.env
        if [ ! -f $GITHUB_WORKSPACE/.env ]; then
          echo ".env file does not exist"
          exit 1
        fi

    - name: Set up GCP SSH key
      run: |
        mkdir -p ~/.ssh/
        echo "${{ secrets.GCP_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        echo "${{ secrets.GCP_SSH_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub

    - name: Deploy to GCP
      env:
        GCP_HOST_SERVER: ${{ secrets.GCP_HOST_SERVER }}
        GCP_HOST_NAME: ${{ secrets.GCP_HOST_NAME }}
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_HOST_NAME }}@${{ secrets.GCP_HOST_SERVER }} << 'EOF'
          cd /home/${{ secrets.GCP_HOST_NAME }}/app

          # Python 3.11 설치 확인
          python3.11 --version

          # Poetry 설치 또는 업데이트
          curl -sSL https://install.python-poetry.org | python3.11 -

          # PATH에 Poetry 추가
          export PATH="/home/${{ secrets.GCP_HOST_NAME }}/.local/bin:$PATH"

          # Poetry 버전 확인
          poetry --version

          # Poetry 환경 설정
          poetry config virtualenvs.in-project true

          # 기존 가상 환경 제거
          rm -rf .venv

          # Poetry를 사용하여 의존성 설치 (자세한 로그 출력)
          poetry install -vv

          # 가상 환경 경로 확인
          poetry env info

          # 설치된 패키지 목록 확인
          poetry run pip list

          # .env 파일 권한 설정
          chmod 600 .env

          # Poetry 환경에서 Alembic 마이그레이션 실행
          poetry run alembic upgrade head

          # 기존 프로세스 종료
          pkill -f "uvicorn main:app"

          # 애플리케이션 실행 (가상 환경 명시적 활성화)
          source $(poetry env info --path)/bin/activate
          nohup uvicorn main:app --host 0.0.0.0 --port 8000 > app.log 2>&1 &

          # 프로세스 확인
          ps aux | grep "uvicorn main:app"

          # 로그 확인 (마지막 20줄)
          tail -n 20 app.log
        EOF