name: Deploy to GCP

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3.11 -
          export PATH="$HOME/.local/bin:$PATH"

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root

      - name: Run tests
        run: poetry run pytest tests
        continue-on-error: true

      - name: Verify and create .env file
        run: |
          echo "${{ secrets.ENV_FILE_CONTENT }}" > $GITHUB_WORKSPACE/.env
          if [ ! -f $GITHUB_WORKSPACE/.env ]; then
            echo ".env file does not exist"
            exit 1
          fi

      - name: Set up GCP SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.GCP_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "${{ secrets.GCP_SSH_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub

      - name: Deploy to GCP
        env:
            GCP_HOST_SERVER: ${{ secrets.GCP_HOST_SERVER }}
            GCP_HOST_NAME: ${{ secrets.GCP_HOST_NAME }}
        run: |
            ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_HOST_NAME }}@${{ secrets.GCP_HOST_SERVER }} << 'EOF'
              cd /home/${{ secrets.GCP_HOST_NAME }}/app
            
              # Python 3.11 버전 확인 및 설정
              python3.11 --version
              export PATH="/usr/bin:$PATH"
              which python3.11
            
              # Poetry 설치 확인 및 재설치
              if ! command -v poetry &> /dev/null; then
                curl -sSL https://install.python-poetry.org | python3.11 -
                export PATH="$HOME/.local/bin:$PATH"
              fi
              poetry --version
            
              # Poetry 환경 설정
              poetry config virtualenvs.in-project true
            
              # 기존 가상 환경 및 캐시 제거
              rm -rf .venv
              rm -rf ~/.cache/pypoetry
            
              # Poetry가 Python 3.11을 사용하도록 명시적으로 설정
              poetry env use python3.11
            
              # Poetry를 사용하여 의존성 설치 (자세한 로그 출력)
              poetry install -vv
            
              # 가상 환경 경로 및 Python 버전 확인
              poetry env info
              poetry run python --version
            
              # 설치된 패키지 목록 확인
              poetry run pip list
            
              # .env 파일 권한 설정
              chmod 600 .env
            
              # Poetry 환경에서 Alembic 마이그레이션 실행
              poetry run alembic upgrade head
            
              # 기존 프로세스 종료
              pkill -f "uvicorn main:app"
            
              # 애플리케이션 실행
              nohup poetry run uvicorn main:app --host 0.0.0.0 --port 8000 > app.log 2>&1 &
            
              # 프로세스 확인
              ps aux | grep "uvicorn main:app"
            
              # 로그 확인 (마지막 20줄)
              tail -n 20 app.log
            
              # 오류 발생 시 추가 디버깅 정보
              if [ $? -ne 0 ]; then
                echo "Deployment failed. Additional debug information:"
                poetry run pip freeze
                cat app.log
                journalctl -xe
              fi
            EOF
